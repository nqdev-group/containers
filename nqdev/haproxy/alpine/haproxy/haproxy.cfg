# https://www.haproxy.com/blog/haproxy-configuration-basics-load-balance-your-servers/
# https://ipv6.rs/tutorial/Windows_10/HAProxy/

global
  stats socket /var/run/api.sock user haproxy group haproxy mode 660 level admin expose-fd listeners
  log stdout format raw local0 info # Log chung cho tất cả yêu cầu
  log stdout format raw local1 notice # Log riêng cho lỗi PR
  tune.ssl.default-dh-param 2048
  tune.lua.bool-sample-conversion normal  # Hoặc "pre-3.1-bug" nếu bạn muốn sử dụng giá trị mặc định.
  ulimit-n      100050
  pidfile       /var/run/haproxy.pid
  maxconn       50000
  user          haproxy
  group         haproxy
  # daemonize
  daemon
  # load script lua
  # lua-load /usr/local/etc/haproxy/lua/200.lua
  lua-load /nqdev/haproxy/lua/redis_connector.lua

resolvers my_dns
    nameserver Google_1 8.8.8.8:53
    nameserver Google_2 8.8.4.4:53
    nameserver Cloudflare_1 1.1.1.1:53
    nameserver Cloudflare_2 1.0.0.1:53
    nameserver OpenDNS_1 208.67.222.222:53
    nameserver OpenDNS_2 208.67.220.220:53
    nameserver resolver1.dns.watch 84.200.69.80:53
    nameserver resolver2.dns.watch 84.200.70.40:53

defaults
    mode                    http
    log                     global
    # option                  httplog # unique (log-format | httplog)
    option                  dontlognull
    option http-server-close
    # option forwardfor       except 127.0.0.0/8
    option forwardfor
    option                  redispatch
    retries                 3
    timeout http-request    10s
    timeout queue           1m
    timeout connect         60000ms
    timeout client          120000ms
    timeout server          120000ms
    timeout http-keep-alive 10s
    timeout check           10s
    maxconn                 50000
    timeout http-keep-alive 5m
    # log-format "%ci:%cp [%tr] %ft %b/%s %TR/%Tw/%Tc/%Tr/%Ta %ST %B %CC %CS %tsc %ac/%fc/%bc/%sc/%rc %sq/%bq %hr %hs %{+Q}r"

    # Log cảnh báo khi server vào trạng thái warning
    # https://docs.haproxy.org/2.6/configuration.html#8.2.6
    log-format ' { "type":"haproxy", "timestamp":%Ts, "created":"%[date,ltime(%Y%m%d%H%M%S)]", "date_time":"[%tr]", "frontend_name":"%ft", "source_ip":"%ci", "warning_status":"%Tw", "client_ip":"%ci", "client_port":%cp, "client":"%ci:%cp", "frontend_name_transport":"%ft", "backend_name":"%b", "server_name":"%s", "backend_server":"%b/%s", "time_receive":%TR, "Tw":%Tw, "Tc":%Tc, "response_time":%Tr, "active_time":%Ta, "status_code":%ST, "bytes_read":%B, "captured_request_cookie":"%CC", "captured_response_cookie":"%CS", "termination_state":"%tsc", "actconn":" %ac", "feconn":"%fc", "beconn":"%bc", "srv_conn":"%sc", "retries":"%rc", "srv_queue":"%sq", "backend_queue":"%bq", "captured_request_headers":"%hr", "captured_response_headers":"%hs", "captured_request_body":"%[capture.req.hdr(0)]", "captured_response_body":"%[capture.res.hdr(0)]", "quote_request":%{+Q}r } '

    # Định nghĩa errorfile cho các lỗi cụ thể
    errorfile 400 /usr/local/etc/haproxy/errorfiles/400.http
    errorfile 403 /usr/local/etc/haproxy/errorfiles/403.http
    errorfile 404 /usr/local/etc/haproxy/errorfiles/404.http
    errorfile 408 /usr/local/etc/haproxy/errorfiles/408.http
    errorfile 429 /usr/local/etc/haproxy/errorfiles/429.http
    errorfile 500 /usr/local/etc/haproxy/errorfiles/500.http
    errorfile 502 /usr/local/etc/haproxy/errorfiles/502.http
    errorfile 503 /usr/local/etc/haproxy/errorfiles/503.http
    errorfile 504 /usr/local/etc/haproxy/errorfiles/504.http

# The cache instance used by the frontend (200MB, 10MB max object, 1 hour max)
# May be consulted using "show cache" on the CLI socket
cache cache
    total-max-size 200        # RAM cache size in megabytes
    max-object-size 10485760  # max cacheable object size in bytes
    max-age 3600              # max cache duration in seconds
    process-vary on           # handle the Vary header (otherwise don't cache)

#---------------------------------------------------------------------
# main frontend which proxy to the backends
# https://docs.haproxy.org/2.6/intro.html
# https://docs.haproxy.org/2.6/management.html
# https://docs.haproxy.org/2.6/configuration.html#8.2.6
# https://cbonte.github.io/haproxy-dconv/2.6/configuration.html#8.2.6
#    Please refer to the table below for currently defined variable
#---------------------------------------------------------------------
# View metrics - https://www.haproxy.com/documentation/kubernetes-ingress/administration/metrics/
# Map files - https://www.haproxy.com/documentation/haproxy-configuration-tutorials/core-concepts/map-files/
# Stick tables - https://www.haproxy.com/documentation/haproxy-configuration-tutorials/core-concepts/stick-tables/
#---------------------------------------------------------------------
# provide a stats page on port 7001
listen stats
    mode http
    bind *:7001
    stats enable
    # stats refresh 30s
    stats hide-version
    stats realm HAproxy-Statistics
    stats uri /
    stats auth admin:UaA84JvFZzNW
    # stats admin if { src 10.0.0.0/8 172.16.0.0/12 192.168.0.0/16 127.0.0.0/8 }
    stats show-node
    stats show-legends
    stats show-modules
    option forwardfor
    option httpclose
    # acl whitelist src -f /etc/haproxy/whitelist.lst
    # http-request deny if !whitelist

# First incoming public service. Supports HTTP/1.x and HTTP/2, using HSTS,
# redirects clear to TLS. Uses a dedicated host name for the stats page.
frontend http_in
    # Set the proxy mode to http (layer 7) or tcp (layer 4)
    bind *:80 name http_in_80
    # bind *:443 ssl crt /etc/haproxy/ssl/2023/esms.vn.crt #/etc/haproxy/ssl/esms.crt
    bind *:443 name http_in_443 ssl crt /etc/haproxy/ssl/ alpn h2,http/1.1 no-sslv3 no-tlsv10 no-tlsv11
    option socket-stats  # provide per-bind line stats

    # set HSTS for one year after all responses
    http-after-response set-header Strict-Transport-Security "max-age=31536000"
    # http-request redirect scheme https code 301 if !{ ssl_fc }

    # silently ignore connect probes and pre-connect without request
    option http-ignore-probes

    # enable HTTP compression of text contents
    compression algo deflate gzip
    compression type text/ application/javascript application/xhtml+xml image/x-icon

    # enable HTTP caching of any cacheable content
    http-request  cache-use cache
    http-response cache-store cache

    maxconn 50000
    option forwardfor
    option forwardfor except 127.0.0.1
    option forwardfor header X-Real-IP

    # Capture the first 100 characters of the request body
    http-request capture req.body len 80000

    # Forward specific headers to backend
    http-request set-header referer                 %[req.hdr(Referer)]
    http-request add-header X-Real-IP               %[src]
    http-request add-header X-Forwarded-For         %[src]
    http-request set-header X-HaEsms-Forwarded-For  %[src]
    http-request add-header X-Forwarded-Port        %[dst_port]
    http-request set-header X-Forwarded-Host        %[req.hdr(Host)]
    http-request set-header X-Forwarded-Proto       %[ssl_fc,iif(https,http)]
    http-request set-header X-Haproxy-Current-Date  %T
    http-request set-header X-SSL                   %[ssl_fc]
    http-request set-header X-SSL-Session_ID        %[ssl_fc_session_id,hex]
    http-request set-header X-SSL-Client-Verify     %[ssl_c_verify]
    http-request set-header X-SSL-Client-DN         %{+Q}[ssl_c_s_dn]
    http-request set-header X-SSL-Client-CN         %{+Q}[ssl_c_s_dn(cn)]
    http-request set-header X-SSL-Issuer            %{+Q}[ssl_c_i_dn]
    http-request set-header X-SSL-Client-NotBefore  %{+Q}[ssl_c_notbefore]
    http-request set-header X-SSL-Client-NotAfter   %{+Q}[ssl_c_notafter]

    # Allow clean known IPs to bypass the filter (files must exist)
    acl whitelist           src -f /etc/haproxy/whitelist.lst
    acl whitelist_webadmin  src -f /etc/haproxy/whitelist-webadmin.lst
    # tcp-request connection accept if { src -f /etc/haproxy/whitelist.lst }
    # tcp-request content reject if { src -f /etc/haproxy/blacklist.lst }
    # http-request deny unless whitelist

    mode http
        acl is_ssl      ssl_fc # Kiểm tra nếu kết nối là SSL
        # acl is_not_ssl  ssl_fc_not_valid # ssl_fc_not_valid Kiểm tra nếu kết nối không phải là SSL

        # Set conditional log levels
        # https://www.haproxy.com/documentation/haproxy-enterprise/administration/logs/
        acl failed_request status 400 401 403 404 405 408 429 500 503
        http-response set-log-level err if failed_request

        # --------------------------------------------------- #

        acl host_nqdev_local                hdr(host) -i nqdev.local

        # Cấu hình redirect HTTPS cho hai điều kiện
        # redirect scheme https if host_vip_rest !{ ssl_fc }

        # Các cấu hình backend và ACLs khác
        use_backend backend_maintenance_server           if host_nqdev_local

        # block config
        use_backend backend_whitelist_ip_server         if host_nqdev_local

    # Choose the default pool of backend servers
    default_backend backend_maintenance_server

# maintenance application
backend backend_maintenance_server
    mode http
    # Algorithm:
    #  - roundrobin is usually better for short requests,
    #  - leastconn is better for mixed slow ones, and long transfers,
    #  - random is generally good when using multiple load balancers
    balance random

    # abort if the client clicks on stop.
    option abortonclose

    # the servers will be used at full load above this number of connections
    fullconn 50000

    # insert a session cookie for user stickiness
    cookie backend_maintenance_server insert indirect nocache

    # Enable compression for responses
    # https://www.haproxy.com/documentation/haproxy-configuration-tutorials/network-performance/compression/
    filter compression
    compression algo gzip
    compression type text/css text/html text/javascript application/javascript text/plain text/xml application/json

    # check the servers' health using HTTP requests
    option httpchk OPTIONS / HTTP/1.0
    http-check expect rstatus (2|3)[0-9][0-9]
    # http-check send meth GET uri / ver HTTP/1.1 hdr host svc1.example.com

    http-request set-header Host esms.center
    # http-request set-header secret_key %[req.hdr(secret_key)]

    # Capture response body up to 80000 bytes with id 0
    http-response capture res.body id 0
    http-response capture res.hdr(Server) id 1

    # Remove some internal headers in the response
    http-response del-header server
    http-response del-header x-powered-by
    http-response del-header x-aspnet-version
    http-response del-header X-Aspnet-Version

    # Add and edit some headers first in the response
    http-response add-header x-instance-env maintenance
    http-response replace-header Set-Cookie ^(.*) \1;\ SameSite=None;\ Secure

    # do not overload the servers (100 concurrent conns max each)
    server host_esms_maintenance_svr78_node1_17007 192.168.2.78:17007 cookie s1 minconn 50 maxconn 500 check inter 1s resolvers my_dns
    server host_esms_maintenance_svr78_node2_17007 192.168.2.78:17007 cookie s1 minconn 50 maxconn 500 check inter 1s resolvers my_dns
    server host_esms_maintenance_svr78_node3_17007 192.168.2.78:17007 cookie s1 minconn 50 maxconn 500 check inter 1s resolvers my_dns

backend backend_whitelist_ip_server
    mode http
    balance roundrobin
    option httpchk OPTIONS / HTTP/1.0
    http-check expect rstatus (2|3)[0-9][0-9]
    http-response del-header server
    http-response del-header x-powered-by
    http-response del-header x-aspnet-version
    http-response del-header X-Aspnet-Version
    http-response add-header x-instance-env whitelist_ip
    http-response replace-header Set-Cookie ^(.*) \1;\ SameSite=None;\ Secure
    server host_whitelist_ip_svr78_node1_17008 192.168.2.78:17008 check
    server host_whitelist_ip_svr78_node2_17008 192.168.2.78:17008 check
    server host_whitelist_ip_svr78_node3_17008 192.168.2.78:17008 check

# khong duoc viet cau hinh duoi dong nay, se loi LF
